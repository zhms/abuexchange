package server

import (
	"fmt"
	"strings"
)

/*
	超级管理员
	账号:admin
	密码:admin
*/

func SetupDatabase() {
	var sql string = ""
	sql = sql + "CREATE TABLE IF NOT EXISTS `ex_config` ("
	sql = sql + "`SellerId` int(11) NOT NULL COMMENT '运营商',"
	sql = sql + "`ConfigName` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '配置名称',"
	sql = sql + "`ConfigValue` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '配置值',"
	sql = sql + "`Remark` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '注释',"
	sql = sql + "PRIMARY KEY (`SellerId`, `ConfigName`) USING BTREE"
	sql = sql + ") ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;"
	Db().QueryNoResult(sql)
	sql = "INSERT IGNORE INTO `ex_config` VALUES (1, 'SystemOpen', '1', '系统是否开放 1开放 2关闭');"
	Db().QueryNoResult(sql)
	sql = "INSERT IGNORE INTO `ex_config` VALUES (1, 'Verify', '0', '是否开启验证码 1开启 2关闭');"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `ex_error`  ("
	sql += "`Id` bigint(11) NOT NULL AUTO_INCREMENT,"
	sql += " `FunName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,"
	sql += "`ErrCode` int(255) NOT NULL,"
	sql += "`ErrMsg` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,"
	sql += "  `CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),"
	sql += "  PRIMARY KEY (`Id`) USING BTREE"
	sql += ") ENGINE = InnoDB AUTO_INCREMENT = 0 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `ex_seller`  ("
	sql += "`SellerId` int(11) NOT NULL AUTO_INCREMENT COMMENT '运营商',"
	sql += "`SellerName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '运营名称',"
	sql += "`State` int(255) NULL DEFAULT 1 COMMENT '状态 1启用 2禁用',"
	sql += "`Remark` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备注',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',"
	sql += "PRIMARY KEY (`SellerId`) USING BTREE"
	sql += ") ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `ex_user`  ("
	sql += " `Id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',"
	sql += "`UserId` int(11) NOT NULL COMMENT '玩家',"
	sql += "`SellerId` int(11) NULL DEFAULT NULL COMMENT '运营商',"
	sql += "`Account` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '账号',"
	sql += "`Password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '登录密码',"
	sql += "`Email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '绑定邮箱',"
	sql += "`NickName` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '昵称',"
	sql += "`PhoneNum` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '绑定手机',"
	sql += "`Token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '登录token',"
	sql += "`RegisterIp` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '注册ip',\r\n"
	sql += "`RegisterTime` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '注册时间',"
	sql += "PRIMARY KEY (`UserId`) USING BTREE,"
	sql += "INDEX `Id`(`Id`) USING BTREE,"
	sql += "UNIQUE INDEX `Account`(`Account`, `SellerId`) USING BTREE"
	sql += ") ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `ex_verify`  ("
	sql += "`Account` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '账号',"
	sql += "`SellerId` int(11) NOT NULL COMMENT '运营商',"
	sql += "`UseType` int(255) NOT NULL COMMENT '使用途径 1注册 2登录',"
	sql += "`VerifyCode` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '验证码',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),"
	sql += "PRIMARY KEY (`Account`, `SellerId`, `UseType`) USING BTREE"
	sql += ") ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;"
	Db().QueryNoResult(sql)

	sql = "	CREATE TABLE IF NOT EXISTS `z_admin_login_log`  ("
	sql += "`Id` int(11) NOT NULL AUTO_INCREMENT,"
	sql += "`UserId` int(11) NULL DEFAULT NULL COMMENT '管理员id',"
	sql += "`SellerId` int(11) NULL DEFAULT NULL COMMENT '运营商',"
	sql += "`Account` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '管理员账号',"
	sql += "`Token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '当次登录token',"
	sql += "`LoginIp` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '登录ip',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '登录时间',"
	sql += "PRIMARY KEY (`Id`) USING BTREE,"
	sql += "INDEX `Account`(`Account`) USING BTREE,"
	sql += "INDEX `SellerId`(`SellerId`) USING BTREE"
	sql += ") ENGINE = InnoDB AUTO_INCREMENT = 0 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `z_admin_opt_log`  ("
	sql += "`Id` int(11) NOT NULL AUTO_INCREMENT,"
	sql += "`Account` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作账号',"
	sql += "`SellerId` int(11) NOT NULL DEFAULT -1 COMMENT '账号所属运营商',"
	sql += "`Opt` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作类型',"
	sql += "`Ip` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '操作ip',"
	sql += "`Token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求token',"
	sql += "`Data` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求数据',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',"
	sql += "PRIMARY KEY (`Id`) USING BTREE,"
	sql += "INDEX `Account`(`Account`) USING BTREE,"
	sql += "INDEX `Opt`(`Opt`) USING BTREE"
	sql += ") ENGINE = InnoDB AUTO_INCREMENT = 0 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `z_admin_role`  ("
	sql += "`Id` int(11) NOT NULL AUTO_INCREMENT,"
	sql += "`RoleName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,"
	sql += "`SellerId` int(11) NOT NULL,"
	sql += "`ParentSellerId` int(11) NOT NULL COMMENT '上级角色运营商',"
	sql += "`Parent` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '上级角色',"
	sql += "`RoleData` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色数据',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',"
	sql += "PRIMARY KEY (`RoleName`, `SellerId`) USING BTREE,"
	sql += "UNIQUE INDEX `id`(`Id`) USING BTREE"
	sql += ") ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;"
	Db().QueryNoResult(sql)

	sql = "INSERT IGNORE INTO `z_admin_role` VALUES (1, '超级管理员', -1, -1, 'god', '{}', now());"
	Db().QueryNoResult(sql)

	sql = "CREATE TABLE IF NOT EXISTS `z_admin_user`  ("
	sql += "`Id` int(11) NOT NULL AUTO_INCREMENT,"
	sql += "`Account` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '账号',"
	sql += "`Password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码',"
	sql += "`SellerId` int(11) NOT NULL COMMENT '运营商',"
	sql += "`RoleSellerId` int(255) NOT NULL DEFAULT -1 COMMENT '角色所属运营商,只能是-1或与SellerId一致',"
	sql += "`RoleName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名',"
	sql += "`State` int(255) NULL DEFAULT 1 COMMENT '状态 1启用 2禁用',"
	sql += "`Token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT 'token',"
	sql += "`GoogleSecret` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '谷歌验证码',"
	sql += "`Remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备注',"
	sql += "`LoginCount` int(255) NULL DEFAULT 0 COMMENT '登录次数',"
	sql += "`LoginTime` datetime(0) NULL DEFAULT NULL COMMENT '最后登录时间',"
	sql += "`LoginIp` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '最后登录Ip',"
	sql += "`CreateTime` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP(0),"
	sql += "PRIMARY KEY (`Account`) USING BTREE,"
	sql += "UNIQUE INDEX `Id`(`Id`) USING BTREE"
	sql += ") ENGINE = InnoDB AUTO_INCREMENT = 0 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;"
	Db().QueryNoResult(sql)

	sql = "INSERT IGNORE INTO `z_admin_user` VALUES (1, 'admin', '21232f297a57a5a743894a0e4a801fc3', -1, -1, '超级管理员', 1, '', '', '超级管理员,不可删除,编辑', 322, now(), '', now());"
	Db().QueryNoResult(sql)

	sql = "CREATE PROCEDURE `ex_api_user_login_password`(p_Account VARCHAR(64),p_SellerId INT,p_Password VARCHAR(64),p_ExtraData VARCHAR(10240))\r\n"
	sql += "proc:BEGIN\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n"
	sql += "	BEGIN\r\n"
	sql += "		GET CURRENT DIAGNOSTICS CONDITION 1	@errcode = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;\r\n"
	sql += "		ROLLBACK;\r\n"
	sql += "		INSERT INTO ex_error(FunName,ErrCode,ErrMsg)VALUES('ex_api_user_login_password',@errcode,@errmsg);\r\n"
	sql += "		SELECT @errcode AS errcode,@errmsg AS errmsg;\r\n"
	sql += "	END;\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	SET @`Password` = NULL;\r\n"
	sql += "	SELECT `Password` INTO @`Password` FROM ex_user WHERE Account = p_Account AND SellerId = p_SellerId;\r\n"
	sql += "	IF ROW_COUNT() = 0 THEN\r\n"
	sql += "		SELECT 100 AS errcode,'账号不存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF @`Password` <> p_Password THEN\r\n"
	sql += "		SELECT 200 AS errcode,'密码不正确' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "END;"
	_, err := Db().Conn().Exec(sql)
	if err != nil && strings.Index(err.Error(), "1304") <= 0 {
		fmt.Println(err)
	}

	sql = "CREATE PROCEDURE `ex_api_user_login_verifycode`(p_Account VARCHAR(64),p_SellerId INT,p_Password VARCHAR(64),p_VerifyCode VARCHAR(10),p_ExtraData VARCHAR(10240))\r\n"
	sql += "proc:BEGIN\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n"
	sql += "	BEGIN\r\n"
	sql += "		GET CURRENT DIAGNOSTICS CONDITION 1	@errcode = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;\r\n"
	sql += "		ROLLBACK;\r\n"
	sql += "		INSERT INTO ex_error(FunName,ErrCode,ErrMsg)VALUES('ex_api_user_login_password',@errcode,@errmsg);\r\n"
	sql += "		SELECT @errcode AS errcode,@errmsg AS errmsg;\r\n"
	sql += "	END;\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	SET @`Password` = NULL;\r\n"
	sql += "	SET @OldToken = NULL;\r\n"
	sql += "	SET @UserId = NULL;\r\n"
	sql += "	SELECT UserId,`Password`,Token INTO @UserId,@`Password`,@OldToken FROM ex_user WHERE Account = p_Account AND SellerId = p_SellerId;\r\n"
	sql += "	IF ROW_COUNT() = 0 THEN\r\n"
	sql += "		SELECT 100 AS errcode,'账号不存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF @`Password` <> p_Password THEN\r\n"
	sql += "		SELECT 200 AS errcode,'密码不正确' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @VerifyResult = ex_fn_verify(p_Account,p_SellerId,2,p_VerifyCode);\r\n"
	sql += "	IF @VerifyResult = 1 THEN\r\n"
	sql += "		SELECT 210 AS errcode, '验证码不存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	ELSEIF @VerifyResult = 2 THEN\r\n"
	sql += "		SELECT 211 AS errcode, '验证码已过期' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	ELSEIF @VerifyResult = 3 THEN\r\n"
	sql += "		SELECT 212 AS errcode, '验证码不正确' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @NewToken = UUID();\r\n"
	sql += "	UPDATE ex_user SET Token = @NewToken WHERE UserId = @UserId;\r\n"
	sql += "	SELECT @UserId AS UserId,p_SellerId AS SellerId,@OldToken AS OldToken,@NewToken AS NewToken;\r\n"
	sql += "END;\r\n"
	_, err = Db().Conn().Exec(sql)
	if err != nil && strings.Index(err.Error(), "1304") <= 0 {
		fmt.Println(err)
	}
	sql = "CREATE PROCEDURE `ex_api_user_register`(p_Account VARCHAR(64),p_SellerId INT,p_Password VARCHAR(64),p_VerifyCode VARCHAR(10),p_ExtraData VARCHAR(10240))\r\n"
	sql += "proc:BEGIN\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n"
	sql += "	BEGIN\r\n"
	sql += "		GET CURRENT DIAGNOSTICS CONDITION 1	@errcode = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;\r\n"
	sql += "		ROLLBACK;\r\n"
	sql += "		INSERT INTO ex_error(FunName,ErrCode,ErrMsg)VALUES('ex_api_user_register',@errcode,@errmsg);\r\n"
	sql += "		SELECT @errcode AS errcode,@errmsg AS errmsg;\r\n"
	sql += "	END;\r\n"
	sql += "	##############################################################################################\r\n"
	sql += "	SET @SystemOpen = NULL;\r\n"
	sql += "	SELECT ConfigValue INTO @SystemOpen FROM ex_config WHERE SellerId = p_SellerId AND ConfigName = 'SystemOpen';\r\n"
	sql += "	IF @SystemOpen <> '1' THEN\r\n"
	sql += "		SELECT 50 AS errcode,'系统维护,请稍后再试' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @SellerState = NULL;\r\n"
	sql += "	SELECT State INTO @SellerState FROM ex_seller WHERE SellerId = p_SellerId;\r\n"
	sql += "	IF ROW_COUNT() = 0 THEN\r\n"
	sql += "		SELECT 100 AS errcode,'运营商不存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF @SellerState <> 1 THEN\r\n"
	sql += "		SELECT 101 AS errcode,'运营商已被禁用' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @Email = NULL;\r\n"
	sql += "	SET @PhoneNum = NULL;\r\n"
	sql += "	IF LOCATE('@',p_Account) > 0 THEN\r\n"
	sql += "		SET @Email = p_Account;\r\n"
	sql += "	ELSE\r\n"
	sql += "		SET @PhoneNum = p_Account;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF EXISTS(SELECT UserId FROM ex_user WHERE Account = p_Account) THEN\r\n"
	sql += "		SELECT 200 AS errcode,'账号已经存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "\r\n"
	sql += "	SET @VerifyResult = ex_fn_verify(p_Account,p_SellerId,1,p_VerifyCode);\r\n"
	sql += "	IF @VerifyResult = 1 THEN\r\n"
	sql += "		SELECT 210 AS errcode, '验证码不存在' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	ELSEIF @VerifyResult = 2 THEN\r\n"
	sql += "		SELECT 211 AS errcode, '验证码已过期' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	ELSEIF @VerifyResult = 3 THEN\r\n"
	sql += "		SELECT 212 AS errcode, '验证码不正确' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "\r\n"
	sql += "	SET @UserId = ex_fn_create_userid();\r\n"
	sql += "	IF @UserId = 0 THEN\r\n"
	sql += "		SELECT 300 AS errcode,'分配玩家Id失败' AS errmsg;\r\n"
	sql += "		LEAVE proc;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF p_ExtraData = NULL OR LENGTH(p_ExtraData) = 0 THEN\r\n"
	sql += "		SET p_ExtraData = '{}';\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @Ip = JSON_UNQUOTE(JSON_EXTRACT(p_ExtraData,'$.ip'));\r\n"
	sql += "	INSERT INTO ex_user(UserId,SellerId,Account,`Password`,Email,PhoneNum,NickName,RegisterIp)\r\n"
	sql += "	VALUES(@UserId,p_SellerId,p_Account,p_Password,@Email,@PhoneNum,CONCAT(@UserId),@Ip);\r\n"
	sql += "	SELECT @UserId AS UserId;\r\n"
	sql += "END;\r\n"
	_, err = Db().Conn().Exec(sql)
	if err != nil && strings.Index(err.Error(), "1304") <= 0 {
		fmt.Println(err)
	}

	sql = "CREATE FUNCTION `ex_fn_create_userid`()\r\n"
	sql += "RETURNS int(11)\r\n"
	sql += "BEGIN\r\n"
	sql += "	#创建玩家Id\r\n"
	sql += "	SET @whilecount = 0;\r\n"
	sql += "	SET @UserId = NULL;\r\n"
	sql += "	WHILE @whilecount < 10 AND @UserId IS NULL DO\r\n"
	sql += "		SET @whilecount = @whilecount + 1;\r\n"
	sql += "		SET @tmpid = 0;\r\n"
	sql += "		SELECT FLOOR( 10000000 + RAND() * (99999999 - 10000000)) INTO @tmpid;\r\n"
	sql += "		IF NOT EXISTS(SELECT UserId FROM ex_user WHERE UserId = @tmpid) THEN\r\n"
	sql += "			SET @UserId = @tmpid;\r\n"
	sql += "		END IF;\r\n"
	sql += "		END WHILE;\r\n"
	sql += "		IF @UserId IS NULL THEN\r\n"
	sql += "		SET @UserId = 0;\r\n"
	sql += "	END IF;\r\n"
	sql += "	RETURN @UserId;\r\n"
	sql += "END;\r\n"
	_, err = Db().Conn().Exec(sql)
	if err != nil && strings.Index(err.Error(), "1304") <= 0 {
		fmt.Println(err)
	}

	sql = "CREATE FUNCTION `ex_fn_verify`(p_Account VARCHAR(64),p_SellerId INT,p_UseType INT,p_VerifyCode VARCHAR(64))\r\n"
	sql += "RETURNS int(11)\r\n"
	sql += "BEGIN\r\n"
	sql += "	/*\r\n"
	sql += "	验证码验证\r\n"
	sql += "	返回值:\r\n"
	sql += "   		0:成功\r\n"
	sql += "   		1:验证码不存在\r\n"
	sql += "   		2:验证码已过期\r\n"
	sql += "   		3:验证码不正确\r\n"
	sql += "	*/\r\n"
	sql += "	SET @Verify = NULL;\r\n"
	sql += "	SELECT ConfigValue INTO @Verify FROM ex_config WHERE SellerId = p_SellerId AND ConfigName = 'Verify';\r\n"
	sql += "	IF @Verify <> '1' THEN\r\n"
	sql += "		RETURN 0;\r\n"
	sql += "	END IF;\r\n"
	sql += "	SET @VerifyCode = NULL;\r\n"
	sql += "	SET @CreateTime = NULL;\r\n"
	sql += "	SELECT VerifyCode,CreateTime INTO @VerifyCode,@CreateTime FROM ex_verify WHERE Account = p_Account AND SellerId = p_SellerId AND UseType = p_UseType;\r\n"
	sql += "	IF ROW_COUNT() = 0 THEN\r\n"
	sql += "		RETURN 1;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF DATE_ADD(@CreateTime, interval 10 MINUTE) < NOW() THEN\r\n"
	sql += "		DELETE FROM ex_verify  WHERE Account = p_Account AND UseType = p_UseType;\r\n"
	sql += "		RETURN 2;\r\n"
	sql += "	END IF;\r\n"
	sql += "	IF @VerifyCode <> p_VerifyCode THEN\r\n"
	sql += "		RETURN 3;\r\n"
	sql += "	END IF;\r\n"
	sql += "	DELETE FROM ex_verify  WHERE Account = p_Account AND UseType = p_UseType;\r\n"
	sql += "	RETURN 0;\r\n"
	sql += "END;\r\n"
	_, err = Db().Conn().Exec(sql)
	if err != nil && strings.Index(err.Error(), "1304") <= 0 {
		fmt.Println(err)
	}
}
